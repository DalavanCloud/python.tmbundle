{
    name = "Python";
    scopeName = "source.python";
    fileTypes = ( py, rpy );
    firstLineMatch = "^#!/.*\\<python\\>";

    foldingStartMarker = "^\\s*(def|class)\\s+([.a-zA-Z0-9_ <]+)\\s*(\\((.*)\\))?\\s*:|\\{\\s*$|\\(\\s*$|\\[\\s*$";
    foldingStopMarker = "^\\s*$|^\\s*\\}|^\\s*\\]|^\\s*\\)";

    increaseIndentPattern = "^\\s*(class|def|elif|else|except|for|if|try|while)\\>.*:\\s*(#.*)?$";

    smartTypingPairs = ( ( "(", ")" ), ( "[", "]" ), ( "{", "}" ), ( "\"", "\"" ), ( "'", "'" ));
    highlightPairs = ( ( "(", ")" ), ( "[", "]" ), ( "{", "}" ), ( "\"", "\"" ), ( "'", "'" ));

    patterns = (
        { name = "invalid.trailing-whitespace";
          match = "( |\t)+$";
        },
        { name = "keyword.built-in.py";
          match = "\\<(and|as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|raise|return|try|while|yield)\\>";
        },
        { name = "keyword.identifier.built-in.py";
          match = "\\<(True|False|None|Ellipsis|self)\\>";
        },
        { name = "keyword.exceptions.built-in.py";
          match = "\\<(ArithmeticError|AssertionError|AttributeError|DeprecationWarning|EOFError|EnvironmentError|Exception|FloatingPointError|FutureWarning|IOError|ImportError|IndentationError|IndexError|KeyError|KeyboardInterrupt|LookupError|MemoryError|NameError|NotImplemented|NotImplementedError|OSError|OverflowError|OverflowWarning|PendingDeprecationWarning|ReferenceError|RuntimeError|RuntimeWarning|StandardError|StopIteration|SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|TypeError|UnboundLocalError|UnicodeDecodeError|UnicodeEncodeError|UnicodeError|UnicodeTranslateError|UserWarning|ValueError|Warning|ZeroDivisionError)\\>";
        },
        { name = "keyword.function.built-in.py";
          match = "\\<(__debug__|__import__|__name__|abs|apply|basestring|bool|buffer|callable|chr|classmethod|cmp|coerce|compile|complex|copyright|delattr|dict|dir|divmod|enumerate|eval|execfile|exit|file|filter|float|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|license|list|locals|long|map|max|min|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\>";
        },
        { name = "constant.numeric.py";
          match = "\\<((0(x|X)[0-9a-fA-F]*)|(([0-9]+[.]?[0-9]*)|([.][0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?[jJ]?\\>";
        },
        { name = "declaration.decorators.py";
          match ="^\\s*@([a-zA-Z_][a-zA-Z_0-9]*)(\\(.*\\))?";
        },
        { name = "declaration.functions.operators.py";
          match = "^\\s*(def)\\s*(__[a-zA-Z][a-zA-Z_0-9]*__)\\s*(\\((.*)\\))?";
          captures = {
              1 = { name = "keyword.built-in.py";};
              2 = { name = "function-name";};
              4 = { name = "function-argument";};
          };
         },
        { name = "declaration.functions.py";
          match = "^\\s*(def)\\s*([a-zA-Z_][a-zA-Z_0-9]*)\\s*(\\((.*)\\))?";
          captures = {
            1 = { name = "keyword.built-in.py";};
            2 = { name = "function-name";};
            4 = { name = "function-argument";};
          };
        },
        { name = "declaration.classes.py";
          match = "^\\s*(class)\\s*([a-zA-Z_][a-zA-Z_0-9]*)\\s*(\\((.*)\\))?";
          captures = {
            1 = { name = "keyword.built-in.py";};
            2 = { name = "class-name";};
            4 = { name = "class-inheritance";};
          };
        },
        /* comments */
        { name = "comment.line.py";
          match = "#(.*)";
        },
        { name = "string.multiline.single-quoted.py";
          begin = "(r|u|ur|R|U|UR|Ur|uR){0,1}\'\'\'[^']*";
          end = "\'\'\'";
          swallow = "('[^']|''[^'])[^']*";
          patterns = (
            { name = "string.interpolation.py";
              match = "%(\\([a-zA-Z_]+\\)){0,1}(0|\\-|\\+){0,1}([0-9\\.]*){0,1}[diuoxXfeEgGsrc]";
            }
          );
        },
        { name = "string.multiline.double-quoted.py";
          begin = "(r|u|ur|R|U|UR|Ur|uR){0,1}\"\"\"[^\"]*";
          end = "\"\"\"";
          swallow = "(\"[^\"]|\"\"[^\"])[^\"]*";
          patterns = (
            {  name = "string.interpolation.py";
               match = "%(\\([a-zA-Z_]+\\)){0,1}(0|\\-|\\+){0,1}([0-9\\.]*){0,1}[diuoxXfeEgGsrc]";
            }
          );
        },
        { name = "string.single-quoted.py";
          begin = "(r|u|ur|R|U|UR|Ur|uR){0,1}\'";
          end = "\'";
          swallow = "[^\'\n]|\\\\.";
          patterns = (
              {  name = "string.interpolation.py";
                 match = "%(\\([a-zA-Z_]+\\)){0,1}(0|\\-|\\+){0,1}([0-9\\.]*){0,1}[diuoxXfeEgGsrc]";
              }
          );
        },

        { name = "string.double-quoted.py";
          begin = "(r|u|ur|R|U|UR|Ur|uR){0,1}\"";
          end = "\"";
          swallow = "[^\"\n]|\\\\.";
          patterns = (
            { name = "string.interpolation.py";
              match = "%(\\([a-zA-Z_]+\\)){0,1}(0|\\-|\\+){0,1}([0-9\\.]*){0,1}[diuoxXfeEgGsrc]";
            }
          );
        },
    );
    uuid = "F23DB5B2-7D08-11D9-A709-000D93B6E43C";
}
