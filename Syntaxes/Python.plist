{
    name = "Python"; 
    scopeName = "source.python"; 
    firstLineMatch = "^#!/.*\\bpython\\b"; 
    fileTypes = (py, rpy, cpy); 
    keyEquivalent = "^~P"; 
    foldingStartMarker = "^\\s*(def|class)\\s+([.a-zA-Z0-9_ b]+)\\s*(\\((.*)\\))?\\s*:|\\{\\s*$|\\(\\s*$|\\[\\s*$"; 
    foldingStopMarker = "^\\s*$|^\\s*\\}|^\\s*\\]|^\\s*\\)"; 
    patterns = (
        {   name = "invalid.trailing-whitespace"; 
            match = "( |\t)+$";
        },
        {   name = "keyword.flow.py"; 
            match = "\\b(break|continue|elif|else|except|finally|for|if|pass|raise|return|try|while|yield)\\b"; 
        }, 
        {   name = "keyword.operator.py"; 
            match = "\\b(and|as|assert|del|exec|global|lambda|in|is|not|or|print)\\b"; 
        },
        {   name = "keyword.other.include.import";
            match = "\\bimport\\b";
        },
        {   name = "keyword.other.include.from";
            match = "\\bfrom\\b";
        },
        {   name = "constant.language.py"; 
            match = "\\b(True|False|None|Ellipsis|self)\\b"; 
        }, 
        {   name = "constant.numeric.py"; 
            match = "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+[.]?[0-9]*)|([.][0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?[jJ]?\\b"; 
        }, 
        {   name = "support.type.py";
            match ="\\b(bool|dict|float|hex|int|list|long|oct|str|tuple)\\b";
        },
        {   name = "support.function.py"; 
            match = "\\b(__debug__|__import__|__name__|abs|apply|basestring|bool|buffer|callable|chr|classmethod|cmp|coerce|compile|complex|copyright|delattr|dict|dir|divmod|enumerate|eval|execfile|exit|file|filter|float|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|license|list|locals|long|map|max|min|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b\\(.*\\)"; 
        },
        {   name = "support.constant.py";
            match = "\\b__(bases|dict|doc|file|name|path|self)__\\b";
        },
        {   name = "support.class.exception.py"; 
            match = "\\b(ArithmeticError|AssertionError|AttributeError|DeprecationWarning|EOFError|EnvironmentError|Exception|FloatingPointError|FutureWarning|IOError|ImportError|IndentationError|IndexError|KeyError|KeyboardInterrupt|LookupError|MemoryError|NameError|NotImplemented|NotImplementedError|OSError|OverflowError|OverflowWarning|PendingDeprecationWarning|ReferenceError|RuntimeError|RuntimeWarning|StandardError|StopIteration|SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|TypeError|UnboundLocalError|UnicodeDecodeError|UnicodeEncodeError|UnicodeError|UnicodeTranslateError|UserWarning|ValueError|Warning|ZeroDivisionError)\\b"; 
        },
        {   name = "declaration.function.decorator.py"; 
            match = "^\\s*@([a-zA-Z_][a-zA-Z_0-9]*)(\\(.*\\))?"; 
        },
        {   name = "declaration.function.operator.py"; 
            match = "^\\s*(def)\\s+(__(add|aepack|and|call|cmp|coerce|complex|contains|copy|deepcopy|delattr|delete|delitem|delslice|del|divmod|div|eq|float|floordiv|getattribute|getattr|getinitargs|getitem|getnewargs|getslice|getstate|get|ge|GNUC|gt|hash|iadd|iand|idiv|ifloordiv|ilshift|imod|imul|init|int|ior|ipow|irshift|isub|iter|itruediv|ixor|len|le|long|lshift|lt|main|mod|mul|newobj|new|ne|nonzero|or|pow|radd|rand|rdivmod|rdiv|reduce|repr|rfloordiv|rlshift|rmod|rmul|ror|rpow|rrshift|rshift|rsub|rtruediv|rxor|setattr|setitem|setslice|setstate|setup|set|str|sub|truediv|unicode|xor)__)\\s*(\\((self)?(.*)\\)):"; 
            captures = {
                1 = {name = "storage.type.py"; }; 
                2 = {name = "entity.name.function.py"; }; 
                4 = {name = "declaration.parameter.py"; }; 
                5 = {name = "constant.language.py"; }; 
                7 = {name = "variable.parameter.py"; }; 
            }; 
        }, 
        {   name = "declaration.function.py"; 
            match = "^\\s*(def)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*(\\((self)?(.*)\\)):"; 
            captures = {
                1 = {name = "storage.type.py"; }; 
                2 = {name = "entity.name.function.py"; }; 
                3 = {name = "declaration.parameter.py"; }; 
                4 = {name = "constant.language.py"; }; 
                6 = {name = "variable.parameter.py"; }; 
            }; 
        }, 
        {   name = "declaration.class.py"; 
            match = "^\\s*(class)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*(\\((.*)\\))?:"; 
            captures = {
                1 = {name = "storage.type.py"; }; 
                2 = {name = "entity.name.class.py"; }; 
                4 = {name = "entity.other.inherited-class.py"; }; 
            }; 
        }, 
        {   name = "comment.line.number-sign.py";
            match = "#(.*)";
        }, 
        {   name = "string.multiline.single-quoted.py"; 
            begin = "(r|u|ur|R|U|UR|Ur|uR)?'''[^']*"; 
            end = "'''"; 
            swallow = "\\\\."; 
            patterns = (
                {   name = "string.interpolated.py"; 
                    match = "%(\\([a-zA-Z_]+\\))?(0|\\-|\\+)?([0-9\\.]*)?[diuoxXfeEgGsrc]"; 
                }
            ); 
        }, 
        {   name = "string.multiline.double-quoted.py"; 
            begin = "(r|u|ur|R|U|UR|Ur|uR)?\"\"\"[^\"]*"; 
            end = "\"\"\""; 
            swallow = "\\\\.";
            patterns = (
                {   name = "string.interpolated.py"; 
                    match = "%(\\([a-zA-Z_]+\\))?(0|\\-|\\+)?([0-9\\.]*)?[diuoxXfeEgGsrc]"; 
                }
            ); 
        }, 
        {   name = "string.single-quoted.py"; 
            begin = "(r|u|ur|R|U|UR|Ur|uR)?'"; 
            end = "'"; 
            swallow = "\\\\."; 
            patterns = (
                {   name = "string.interpolated.py"; 
                    match = "%(\\([a-zA-Z_]+\\))?(0|\\-|\\+)?([0-9\\.]*)?[diuoxXfeEgGsrc]"; 
                }
            ); 
        }, 
        {   name = "string.double-quoted.py"; 
            begin = "(r|u|ur|R|U|UR|Ur|uR)?\""; 
            end = "\""; 
            swallow = "\\\\."; 
            patterns = (
                {   name = "string.interpolated.py"; 
                    match = "%(\\([a-zA-Z_]+\\))?(0|\\-|\\+)?([0-9\\.]*)?[diuoxXfeEgGsrc]"; 
                }
            ); 
        }
    ); 
    uuid = "F23DB5B2-7D08-11D9-A709-000D93B6E43C"; 
}